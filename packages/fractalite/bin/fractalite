#!/usr/bin/env node --no-warnings

const { relative, resolve, dirname } = require('path');
const mri = require('mri');
const { cyan, dim, red } = require('kleur');
const { Signale } = require('signale');
const { stripIndent, source } = require('common-tags');
const { loadConfig } = require('@frctl/fractalite-support');
const ip = require('ip');
const fractalite = require('../.');
const { assign } = Object;

const logger = new Signale({
  types: {
    debug: {
      badge: 'âœŽ',
      color: 'gray'
    }
  }
});

const cwd = process.cwd();
const args = mri(process.argv.slice(2));

(async () => {
  let loaded;

  try {
    loaded = await loadConfig({ cwd, path: args.config, name: 'fractal' });
    const rootPath = dirname(loaded.path);
    if (cwd !== rootPath) {
      process.chdir(rootPath);
    }
    logger.info(`Using config file ${cyan(`./${relative(cwd, loaded.path)}`)}`);
  } catch(err) {
    if (err.type === 'CONFIG_NOT_FOUND') {
      // TODO: run interactive config creator?
      loaded = { config: {} };
      logger.warn(`Config file not found. Continuing without config.`);
    } else {
      throw err;
    }
  }

  try {
    const command = args._[0] || 'start';
    const { config } = loaded;

    if (command === 'start') {

      const mode = assign({ mode: 'develop' }, config.develop || {}, args);
      const app = fractalite({ mode, ...config });

      const interactiveLogger = new Signale({interactive: true});

      app.on('error', function onError(err) {
        if (err.message.indexOf('ECONNRESET') >= 0) {
          return;
        }
        if (err.status === 404) {
          interactiveLogger.warn(`${err.message} ${dim(`[${err.path}]`)}`);
        } else {
          interactiveLogger.error(err);
        }
      });

      app.on('updated', () => interactiveLogger.success(`Compilation successful [${(new Date()).toUTCString()}]`));

      const server = await app();
      const port = server.address().port;

      logger.success(`Fractalite server started`);
      logger.log('')
      logger.log(stripIndent`
        ---
        Local:   ${cyan(`http://localhost:${port}`)}
        Network: ${cyan(`http://${ip.address()}:${port}`)}
        ---
      `);
      logger.log('')

      process.on('SIGINT', () => {
        server.close();
        logger.success('Fractalite server stopped');
        process.exit(0);
      });

    } else if (command === 'build') {

      const mode = assign({ mode: 'build' }, config.build || {}, args);
      const app = fractalite({ mode, ...config });

      app.on('build.end', results => {
        logger.success(`Fractalite static build complete. ${results.length} files generated.`);
      });

      app.on('build.serving', server => {
        logger.success(`Servering static build`);
        const port = server.address().port;
        logger.log(stripIndent`
          ---
          Local:   ${cyan(`http://localhost:${port}`)}
          Network: ${cyan(`http://${ip.address()}:${port}`)}
          ---
        `);

        process.on('SIGINT', () => {
          server.close();
          logger.success('Fractalite static build server stopped');
          process.exit(0);
        });
      });

      await app();



    } else {
      throw new Error(`Command '${command}' not recognised`);
    }

  } catch(err) {
    logger.error(err);
    process.exit(1);
  }
})();
